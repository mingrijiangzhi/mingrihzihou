# 题目
L2-011 玩转二叉树 (25 分)
给定一棵二叉树的中序遍历和前序遍历，请你先将树做个镜面反转，再输出反转后的层序遍历的序列。所谓镜面反转，是指将所有非叶结点的左右孩子对换。这里假设键值都是互不相等的正整数。

输入格式：
输入第一行给出一个正整数N（≤30），是二叉树中结点的个数。第二行给出其中序遍历序列。第三行给出其前序遍历序列。数字间以空格分隔。

输出格式：
在一行中输出该树反转后的层序遍历的序列。数字间以1个空格分隔，行首尾不得有多余空格。

输入样例：
7
1 2 3 4 5 6 7
4 1 3 2 6 5 7
输出样例：
4 6 1 7 5 3 2
# 思路
**与已知后序和中序求二叉树同理，找出前序中的根，然后依次寻根即可。最后，在增序遍历时每一层的从右向左遍历即可。**
# 代码
~~~·
#include<stdio.h>
#include<stdlib.h>
typedef struct tree{
	int data;
	struct tree *left;
	struct tree *right;
}node,*re;
re tr=NULL;
int a[50],b[50],c[50];
re insert(int f,int start,int end);
int main()
{
	int n;
	scanf("%d",&n);
	for(int i=0;i<n;i++){
		scanf("%d",&a[i]);
	} 
	for(int i=0;i<n;i++){
		scanf("%d",&b[i]);
	}
	tr=insert(0,0,n-1);
	int flag=0,start=-1,end=0;
	re g[50];
	g[0]=tr;
	while(flag<n){
		start++;
		if(flag){
			printf(" ");
		}
		printf("%d",g[start]->data);
		flag++;
		if(g[start]->right){
			end++;
			g[end]=g[start]->right;
		}
		if(g[start]->left){
			end++;
			g[end]=g[start]->left;
		}
	}
}
re insert(int f,int start,int end)
{
	re tree;
	if(start>end){
		return NULL;
	}
	int i;
	for(i=start;a[i]!=b[f];i++){
		continue;
	}
	tree=(re)malloc(sizeof(node));
	tree->data=b[f];
	tree->left=insert(f+1,start,i-1);
	tree->right=insert(f+i-start+1,i+1,end);
	return tree;
}