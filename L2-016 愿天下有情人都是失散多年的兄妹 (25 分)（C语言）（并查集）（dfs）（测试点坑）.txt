# 题目
L2-016 愿天下有情人都是失散多年的兄妹 (25 分)
呵呵。大家都知道五服以内不得通婚，即两个人最近的共同祖先如果在五代以内（即本人、父母、祖父母、曾祖父母、高祖父母）则不可通婚。本题就请你帮助一对有情人判断一下，他们究竟是否可以成婚？

输入格式：
输入第一行给出一个正整数N（2 ≤ N ≤10 
4
 ），随后N行，每行按以下格式给出一个人的信息：

本人ID 性别 父亲ID 母亲ID
其中ID是5位数字，每人不同；性别M代表男性、F代表女性。如果某人的父亲或母亲已经不可考，则相应的ID位置上标记为-1。

接下来给出一个正整数K，随后K行，每行给出一对有情人的ID，其间以空格分隔。

注意：题目保证两个人是同辈，每人只有一个性别，并且血缘关系网中没有乱伦或隔辈成婚的情况。

输出格式：
对每一对有情人，判断他们的关系是否可以通婚：如果两人是同性，输出Never Mind；如果是异性并且关系出了五服，输出Yes；如果异性关系未出五服，输出No。

输入样例：
24
00001 M 01111 -1
00002 F 02222 03333
00003 M 02222 03333
00004 F 04444 03333
00005 M 04444 05555
00006 F 04444 05555
00007 F 06666 07777
00008 M 06666 07777
00009 M 00001 00002
00010 M 00003 00006
00011 F 00005 00007
00012 F 00008 08888
00013 F 00009 00011
00014 M 00010 09999
00015 M 00010 09999
00016 M 10000 00012
00017 F -1 00012
00018 F 11000 00013
00019 F 11100 00018
00020 F 00015 11110
00021 M 11100 00020
00022 M 00016 -1
00023 M 10012 00017
00024 M 00022 10013
9
00021 00024
00019 00024
00011 00012
00022 00018
00001 00004
00013 00016
00017 00015
00019 00021
00010 00011
输出样例：
Never Mind
Yes
Never Mind
No
Yes
No
Yes
No
No
# 思路
**用并查集来将他们之间联系起来，并用find判断他们之间是否有亲属关系，最后用dfs（深度优先搜索）来判断他们之间的亲属关系是否超过五代。
注意:题目有一些比较奇怪的测试数据，可能会让你判断已婚的人是否能在一起。所以，每个人父母的性别也是需要标明的。
find函数用递归实现会更省时，，占用的内存较大在内存限制小时用到的比较多**
# 代码
~~~·
#include<stdio.h>
typedef struct node{
	char sex;
	int fa;
	int mu;
}r; 
r a[100005];
int home[100005];

int init();
int find(int t);
void un(int a,int b);
int dfs(int p,int q,int age);
int main(){
	init();
	int n,k;
	int i;
	int x;
	scanf("%d",&n);
	char sex;
	int id,father,mather;
	for(i=0;i<n;i++){
		scanf("%d %c %d %d", &id, &sex, &father, &mather);
        a[id].fa = father;
        a[id].sex = sex;
        a[id].mu = mather;
        un(id, father);
        un(id, mather);
        if (father != -1)
            a[father].sex = 'M';
        if (mather != -1)
            a[mather].sex = 'F';	
	}
	int p,q;
	scanf("%d",&k);
	while(k--){
		scanf("%d %d",&p,&q);
		if(a[p].sex==a[q].sex){
			printf("Never Mind\n");
		}else{
			if(find(p)!=find(q)){
				printf("Yes\n");
			}else{
				if(dfs(p,q,1)){
					printf("Yes\n");
				}else{
					printf("No\n");
				}
			}
		}
	}
	
}
int init()
{
	for(int i=0;i<100005;i++){
		home[i]=i;
		a[i].fa=-1;
		a[i].mu=-1;
	}
}
int find(int t)
{
	if(t==home[t]){
		return t;
	}else{
		return home[t]=home[home[t]];
	}
}
void un(int a,int b)
{
	if(b==-1){
		return;
	}
	a=find(a);
	b=find(b);
	if(a>b){
		home[a]=b;
	}else{
		home[b]=a;
	}
	
}
int dfs(int p,int q,int age)
{
	if(p==-1||q==-1){
		return 1;
	}
	if(age>5){
		return 1;
	}
	if(p==q){
		return 0;
	}else{
		return dfs(a[p].fa,a[q].fa,age+1)&&dfs(a[p].fa,a[q].mu,age+1)&&dfs(a[q].fa,a[p].mu,age+1)&&dfs(a[p].mu,a[q].mu,age+1);
	}
}