# 题目
给你一个整数nn，你需要找到两个整数ll和rr，它们的范围是： -10^{18} \le l < r \le 10^{18}−10 
18
 ≤l<r≤10 
18
  并且使得 l + (l + 1) + \ldots + (r - 1) + r = nl+(l+1)+…+(r−1)+r=n.

Input
第一行输入一个单独的整数 tt (1 \le t \le 10^41≤t≤10 
4
 ) — 表示测试用例的组数。

每组测试用例只有一行，每行只有一个整数 nn (1 \le n \le 10^{18}1≤n≤10 
18
 ).

Output
对于每组测试用例，输出两个整数 ll 和 rr ，令 l + (l + 1) + \ldots + (r - 1) + r = nl+(l+1)+…+(r−1)+r=n，且-10^{18} \le l < r \le 10^{18}−10 
18
 ≤l<r≤10 
18
 .

可以证明答案一定存在，如果有多种不同的答案，只需输出其中任意一种即可。

Example
Input
7
1
2
3
6
100
25
3000000000000
Output
0 1
-1 2 
1 2 
1 3 
18 22
-2 7
999999999999 1000000000001
Note
对于第一组测试用例：0 + 1 = 10+1=1.

对于第二组测试用例：(-1) + 0 + 1 + 2 = 2(−1)+0+1+2=2.

对于第四组测试用例：1 + 2 + 3 = 61+2+3=6.

对于第五组测试用例：18 + 19 + 20 + 21 + 22 = 10018+19+20+21+22=100.

对于第六组测试用例：(-2) + (-1) + 0 + 1 + 2 + 3 + 4 + 5 + 6 + 7 = 25(−2)+(−1)+0+1+2+3+4+5+6+7=25.
# 思路
**只要一种结果，那么直接使用等差数列n项求和公式可得出结果为（-n+1）和n。**
# 代码
~~~
#include<stdio.h>
int main() 
{
	int t;
	long long int a,n;
	scanf("%d",&t);
	while(t--){
		scanf("%lld",&n);
		printf("%lld %lld\n",-n+1,n);
		
	} 
	return 0;
}
