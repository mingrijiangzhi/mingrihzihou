# 题目
L2-013 红色警报 (25 分)
战争中保持各个城市间的连通性非常重要。本题要求你编写一个报警程序，当失去一个城市导致国家被分裂为多个无法连通的区域时，就发出红色警报。注意：若该国本来就不完全连通，是分裂的k个区域，而失去一个城市并不改变其他城市之间的连通性，则不要发出警报。

输入格式：
输入在第一行给出两个整数N（0 < N ≤ 500）和M（≤ 5000），分别为城市个数（于是默认城市从0到N-1编号）和连接两城市的通路条数。随后M行，每行给出一条通路所连接的两个城市的编号，其间以1个空格分隔。在城市信息之后给出被攻占的信息，即一个正整数K和随后的K个被攻占的城市的编号。

注意：输入保证给出的被攻占的城市编号都是合法的且无重复，但并不保证给出的通路没有重复。

输出格式：
对每个被攻占的城市，如果它会改变整个国家的连通性，则输出Red Alert: City k is lost!，其中k是该城市的编号；否则只输出City k is lost.即可。如果该国失去了最后一个城市，则增加一行输出Game Over.。

输入样例：
5 4
0 1
1 3
3 0
0 4
5
1 2 0 4 3
输出样例：
City 1 is lost.
City 2 is lost.
Red Alert: City 0 is lost!
City 4 is lost.
City 3 is lost.
Game Over.
# 思路
**本题应用并查集，利用并查集将城市通过道路连接为若干个区域，当某个城市被侵占了后，所有与该城市有关的路将不能再使用，此时在用并查集将城市通过其他的路连接为若干个区域，若区域数于该城市被攻占前的区域数相同或等于被攻占前的区域数加1（在一个城市被攻占时，如果该城市只是单方向连接了其他城市，则没有影响，此时区域数为它自己加原来的区域数），则没有影响城市的连通；反之则影响**
# 代码
~~~·
#include<stdio.h>
int city[550];
int f[5500];
int x[5500],y[5500];
void init(int n);
int find(int x);
void bing(int a,int b);
int n,m;

int main()
{
	scanf("%d %d",&n,&m);
	init(n);
	for(int i=0;i<m;i++){
		scanf("%d %d",&x[i],&y[i]);
		bing(x[i],y[i]);
	}
	int count=0;
	for(int i=0;i<n;i++){
		if(city[i]==i){
			count++;
		}
	}
	int k;
	int cnt=0;
	scanf("%d",&k);
	int t=k;
	while(k--){
		int z;
		scanf("%d",&z);
		f[z]=1;
		init(n);
		for(int j=0;j<m;j++){
			if(f[x[j]]||f[y[j]]){
				continue;
			}
			bing(x[j],y[j]);
		}
		int cnt=0;
		for(int i=0;i<n;i++){
			if(city[i]==i){
				cnt++;
			}
		}
		if(count==cnt||cnt==count+1){
			printf("City %d is lost.\n", z);
		}else{
			printf("Red Alert: City %d is lost!\n", z);
		}
		count=cnt;
		
	}
	if(t==n){
		printf("Game Over.\n");
	}
	return 0;	
} 
void init(int n)
{
	for(int i=0;i<n;i++){
		city[i]=i;
	}
}
int find(int x)
{
	while(x!=city[x]){
		x=city[x];
	}
	return x;
}
void bing(int a,int b)
{
	a=find(a);
	b=find(b);
	if(a>b){
		city[a]=b;
	}else{
		city[b]=a;
	}
}