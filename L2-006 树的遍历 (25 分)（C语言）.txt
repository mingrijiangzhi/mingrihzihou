# 题目
L2-006 树的遍历 (25 分)
给定一棵二叉树的后序遍历和中序遍历，请你输出其层序遍历的序列。这里假设键值都是互不相等的正整数。

输入格式：
输入第一行给出一个正整数N（≤30），是二叉树中结点的个数。第二行给出其后序遍历序列。第三行给出其中序遍历序列。数字间以空格分隔。

输出格式：
在一行中输出该树的层序遍历的序列。数字间以1个空格分隔，行首尾不得有多余空格。

输入样例：
7
2 3 1 5 7 6 4
1 2 3 4 5 6 7
输出样例：
4 1 6 3 5 7 2
# 思路
**二叉树的后续遍历的最后一个为二叉树的根，二叉树的中序遍历中的根将二叉树分为左右两棵子树，子树的后序遍历和中序遍历依旧对应，之后按照前面的方法依次递归即可**
# 代码
~~~·
#include<stdio.h>
#include<stdlib.h>
typedef struct tree{
	int data;
	struct tree*left;
	struct tree*right;
}node,*re;
re lemi(int f,int le,int ri);
void ceng(re tr);

re tr=NULL;
int n;
int a[50],b[50];

int main()
{
	scanf("%d",&n);
	int i;
	for(i=0;i<n;i++){
		scanf("%d",&a[i]);
	}
	for(i=0;i<n;i++){
		scanf("%d",&b[i]);
	}
	tr=lemi(n-1,0,n-1);
	ceng(tr);
	return 0;
}
re lemi(int f,int le,int ri)
{
	re tr;
	if(le>ri){
		return NULL;
	}
	int i;
	for(i=le;b[i]!=a[f];i++){
		continue;
	}
	tr=(re)malloc(sizeof(node));
	tr->data=a[f];
	tr->left=lemi(f-(ri-i)-1,le,i-1);
	tr->right=lemi(f-1,i+1,ri);
	return tr;
}
void ceng(re tr)
{
	if(tr==NULL){
		return;
	}
	int flag=0;
	re g[50];
	g[0]=tr;
	int le=-1;int ri=0;
	while(flag!=n){
		le++;
		if(flag){
			printf(" ");
		}
		printf("%d",g[le]->data);
		flag++;
		if(g[le]->left!=NULL){
			ri++;
			g[ri]=g[le]->left;
		}
		if(g[le]->right!=NULL){
			ri++;
			g[ri]=g[le]->right;
		}
	}
}