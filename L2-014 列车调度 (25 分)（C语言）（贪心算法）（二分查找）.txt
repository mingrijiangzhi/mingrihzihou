# 题目
L2-014 列车调度 (25 分)
火车站的列车调度铁轨的结构如下图所示。

![在这里插入图片描述](https://img-blog.csdnimg.cn/ed7de76cd7c04ecf960de5061e16f215.png)


两端分别是一条入口（Entrance）轨道和一条出口（Exit）轨道，它们之间有N条平行的轨道。每趟列车从入口可以选择任意一条轨道进入，最后从出口离开。在图中有9趟列车，在入口处按照{8，4，2，5，3，9，1，6，7}的顺序排队等待进入。如果要求它们必须按序号递减的顺序从出口离开，则至少需要多少条平行铁轨用于调度？

输入格式：
输入第一行给出一个整数N (2 ≤ N ≤10 
5
 )，下一行给出从1到N的整数序号的一个重排列。数字间以空格分隔。

输出格式：
在一行中输出可以将输入的列车按序号递减的顺序调离所需要的最少的铁轨条数。

输入样例：
9
8 4 2 5 3 9 1 6 7
输出样例：
4
# 思路
对该题来说，最后要达到的情况就是每条平行轨道上的列车按照升序尽可能多的排列
，所以对于每一趟列车，都要判断是否需要新开一个轨道和放在哪一个轨道，根据贪心的思想，能不新开轨道就不新开轨道，所以在列车进入时只要序号比原来轨道上的最后进入轨道的一列车小，就不用新开轨道，否则需要新开轨道。
根据样例，最终排列应该是这样的：
~~~
8421
53
96
7
~~~
# 代码
~~~·
#include<stdio.h>
int a[100005],dp[100005];
int cnt=1;
int search(int a[],int cnt,int key);
int main()
{
	int n;
	scanf("%d",&n);
	for(int i=1;i<=n;i++){
		scanf("%d",&a[i]);
	}
	dp[1]=a[1];
	for(int i=2;i<=n;i++){
		if(a[i]>dp[cnt]){
			cnt++;
			dp[cnt]=a[i];
		}else{
			int j=search(a,cnt,a[i]);
			dp[j]=a[i];
		}
	}
	printf("%d",cnt);
}
int search(int a[],int cnt,int key)
{
	int left=1,right=cnt,mid;
	while(left<=right){
		mid=left+(right-left)/2;
		if(dp[mid]>key){
			right=mid-1;
		}else{
			left=mid+1;
		}
	}
	return left;
}