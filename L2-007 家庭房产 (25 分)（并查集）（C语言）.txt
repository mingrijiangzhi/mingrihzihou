# 题目
L2-007 家庭房产 (25 分)
给定每个人的家庭成员和其自己名下的房产，请你统计出每个家庭的人口数、人均房产面积及房产套数。

输入格式：
输入第一行给出一个正整数N（≤1000），随后N行，每行按下列格式给出一个人的房产：

编号 父 母 k 孩子1 ... 孩子k 房产套数 总面积
其中编号是每个人独有的一个4位数的编号；父和母分别是该编号对应的这个人的父母的编号（如果已经过世，则显示-1）；k（0≤k≤5）是该人的子女的个数；孩子i是其子女的编号。

输出格式：
首先在第一行输出家庭个数（所有有亲属关系的人都属于同一个家庭）。随后按下列格式输出每个家庭的信息：

家庭成员的最小编号 家庭人口数 人均房产套数 人均房产面积
其中人均值要求保留小数点后3位。家庭信息首先按人均面积降序输出，若有并列，则按成员编号的升序输出。

输入样例：
10
6666 5551 5552 1 7777 1 100
1234 5678 9012 1 0002 2 300
8888 -1 -1 0 1 1000
2468 0001 0004 1 2222 1 500
7777 6666 -1 0 2 300
3721 -1 -1 1 2333 2 150
9012 -1 -1 3 1236 1235 1234 1 100
1235 5678 9012 0 1 50
2222 1236 2468 2 6661 6662 1 300
2333 -1 3721 3 6661 6662 6663 1 100
输出样例：
3
8888 1 1.000 1000.000
0001 15 0.600 100.000
5551 4 0.750 100.000
# 思路
**这里要用到并查集，将有亲戚关系的联系起来，并且达到每次find都能找到唯一的id，即最小的id；在代码中由find函数和un函数实现。
注意，在使用并集差时需要先初始化。**
# 代码
~~~·
#include<stdio.h>
#include<stdlib.h>
typedef struct node{
	int master;
	int fa;
	int mu;
	int kidn;
	int kids[10];
	double sum,area;
}node;
node a[10005];
typedef struct node1{
	int people;
	int id,flag;
	double sum,area;
}node1;
node1 b[10005];
typedef struct node2{
	int people;
	int id;
	double sum,area; 
}node2;
node2 c[1005];
int n;
int cnt=0;
int visit[10005]={0};
int home[10005];
int find(int x);
void un(int a,int b);

int main()
{
	for(int i=0;i<10005;i++){   //初始化
		home[i]=i;
		b[i].flag=0;    //该题所需，并非并查集的要求
	}
	scanf("%d",&n);
	for(int i=0;i<n;i++){
		scanf("%d %d %d %d",&a[i].master,&a[i].fa,&a[i].mu,&a[i].kidn);
		visit[a[i].master]=1;
		if(a[i].fa!=-1){
			un(a[i].master,a[i].fa);
			visit[a[i].fa]=1;
		}
		if(a[i].mu!=-1){
			un(a[i].master,a[i].mu);
			visit[a[i].mu]=1;
		}
		for(int j=0;j<a[i].kidn;j++){
			scanf("%d",&a[i].kids[j]);
			un(a[i].master,a[i].kids[j]);
			visit[a[i].kids[j]]=1;
		}
		scanf("%lf %lf",&a[i].sum,&a[i].area);
	}
	for(int i=0;i<n;i++){
		int id=find(a[i].master);
		b[id].id=id;
		b[id].sum+=a[i].sum;
		b[id].area+=a[i].area;
		b[id].flag=1;
	}
	for(int i=0;i<10005;i++){
		if(visit!=0){
			b[find(i)].people+=1;
		}
	}
	for(int i=0;i<10005;i++){
		if(b[i].flag){
			b[i].sum=b[i].sum/b[i].people;
			b[i].area=b[i].area/b[i].people;
		}
	}
	for(int i=0;i<10005;i++){
		if(b[i].flag){
			c[cnt].id=b[i].id;
			c[cnt].area=b[i].area;
			c[cnt].people=b[i].people;
			c[cnt].sum=b[i].sum;
			cnt++;	
		}
	}
	node2 t;
	for(int i=0;i<n;i++){
		for(int j=i+1;j<n;j++){
			if(c[i].area<c[j].area){
				t=c[i];
				c[i]=c[j];
				c[j]=t;
			}else{
				if(c[i].area==c[j].area){
					if(c[j].id<c[i].id){
						t=c[i];
						c[i]=c[j];
						c[j]=t;
					}
				}
			}
		}
	}
	printf("%d\n",cnt);
	for(int i=0;i<cnt;i++){
		printf("%04d %d %.3lf %.3lf\n",c[i].id,c[i].people,c[i].sum,c[i].area);
	}
	return 0;
}
int find(int x){
	while(x!=home[x]){
		x=home[x];
	}
	return x;
}
void un(int a,int b){
	int f11=find(a);
	int f22=find(b);
	if(f11>f22){
		home[f11]=f22;
	}else{
		home[f22]=f11;
	}
}
