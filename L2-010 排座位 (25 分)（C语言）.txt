# 题目
L2-010 排座位 (25 分)
布置宴席最微妙的事情，就是给前来参宴的各位宾客安排座位。无论如何，总不能把两个死对头排到同一张宴会桌旁！这个艰巨任务现在就交给你，对任何一对客人，请编写程序告诉主人他们是否能被安排同席。

输入格式：
输入第一行给出3个正整数：N（≤100），即前来参宴的宾客总人数，则这些人从1到N编号；M为已知两两宾客之间的关系数；K为查询的条数。随后M行，每行给出一对宾客之间的关系，格式为：宾客1 宾客2 关系，其中关系为1表示是朋友，-1表示是死对头。注意两个人不可能既是朋友又是敌人。最后K行，每行给出一对需要查询的宾客编号。

这里假设朋友的朋友也是朋友。但敌人的敌人并不一定就是朋友，朋友的敌人也不一定是敌人。只有单纯直接的敌对关系才是绝对不能同席的。

输出格式：
对每个查询输出一行结果：如果两位宾客之间是朋友，且没有敌对关系，则输出No problem；如果他们之间并不是朋友，但也不敌对，则输出OK；如果他们之间有敌对，然而也有共同的朋友，则输出OK but...；如果他们之间只有敌对关系，则输出No way。

输入样例：
7 8 4
5 6 1
2 7 -1
1 3 1
3 4 1
6 7 -1
1 2 1
1 4 1
2 3 -1
3 4
5 7
2 3
7 2
输出样例：
No problem
OK
OK but...
No way
# 思路
**用并查集构造一个朋友圈，用二维数组表示出存在敌对关系的人，考虑到敌对关系是对于双方而言的，所以二维数组的下标记录敌对关系时应反过来再记录一次。
如果不用并查集，测试点二比较难搞，因为他会给出朋友的朋友的朋友的朋友也是朋友这种测试点，不太好处理。**
# 代码
~~~·
#include<stdio.h>
int a[105][105]={0};
int Friend[105];
void init();
int find(int x);
void un(int a,int b);
int main()
{
	init();
	int n,m,k;
	scanf("%d %d %d",&n,&m,&k);
	for(int i=0;i<m;i++){
		int x,y,z;
		scanf("%d %d %d",&x,&y,&z);
		if(z==1){
			un(x,y);
		}else{
			a[x][y]=1;
			a[y][x]=1;
		}
	}
	for(int i=0;i<k;i++){
		int x,y;
		int flag=0,flag1=0;
		scanf("%d %d",&x,&y);
		int x1=find(x);
		int x2=find(y);
		if(x1==x2&&a[x][y]==0){
			printf("No problem\n");
		}
		if(x1!=x2&&a[x][y]==0){
			printf("OK\n");
		}
		if(x1==x2&&a[x][y]==1){
			printf("OK but...\n");
		}
		if(x1!=x2&&a[x][y]==1){
			printf("No way\n");
		}
	}
	return 0;	
}
void init()
{
	for(int i;i<105;i++){
		Friend[i]=i;
	}
}
int find(int x){
	while(x!=Friend[x]){
		x=Friend[x];
	}
	return x;
}
void un(int a,int b){
	int f11=find(a);
	int f22=find(b);
	if(f11>f22){
		Friend[f11]=f22;
	}else{
		Friend[f22]=f11;
	}
}
