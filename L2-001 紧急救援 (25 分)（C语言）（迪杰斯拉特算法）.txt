# 题目
L2-001 紧急救援 (25 分)
作为一个城市的应急救援队伍的负责人，你有一张特殊的全国地图。在地图上显示有多个分散的城市和一些连接城市的快速道路。每个城市的救援队数量和每一条连接两个城市的快速道路长度都标在地图上。当其他城市有紧急求助电话给你的时候，你的任务是带领你的救援队尽快赶往事发地，同时，一路上召集尽可能多的救援队。

输入格式:
输入第一行给出4个正整数N、M、S、D，其中N（2≤N≤500）是城市的个数，顺便假设城市的编号为0 ~ (N−1)；M是快速道路的条数；S是出发地的城市编号；D是目的地的城市编号。

第二行给出N个正整数，其中第i个数是第i个城市的救援队的数目，数字间以空格分隔。随后的M行中，每行给出一条快速道路的信息，分别是：城市1、城市2、快速道路的长度，中间用空格分开，数字均为整数且不超过500。输入保证救援可行且最优解唯一。

输出格式:
第一行输出最短路径的条数和能够召集的最多的救援队数量。第二行输出从S到D的路径中经过的城市编号。数字间以空格分隔，输出结尾不能有多余空格。

输入样例:
4 5 0 3
20 30 40 10
0 1 1
1 3 2
0 3 3
0 2 2
2 3 2
输出样例:
2 60
0 1 3
# 思路
利用迪杰斯拉特算法，计算出某个顶点到其他所有顶点的最短路径。然后根据题中所要求的条件对相同最短路径进行筛选。
实质上是基于贪心思想，从起始位置出发，每次寻找与起点距离最近且未访问过的顶点，以该顶点作为中间节点，更新从起点到其他顶点的距离，直到全部顶点都作为了中间节点，并完成路径更新，算法结束。
# 代码
~~~·
#include<stdio.h>
int n,m,s,d;
int num[550];//城市救援队数目 
int sf[550][550];//两座城市之间的距离 
int mins[550];//起始节点到其他节点的最短距离 
int flag[550];//标记是否作为过中间节点 
int max[100000];//从起始节点到其他节点召集救援队最大数目 
int cnt[100005];//存储从起始节点到其他节点的最短路径数目
int way[100005];//存储最短路径每个节点的前面一个节点 
const int INF=1e9+7;

void dijistra();
void Print(int t);
int main()
{
	scanf("%d %d %d %d",&n,&m,&s,&d);
	for(int i=0;i<n;i++){
		scanf("%d",&num[i]);
	}
	for(int i=0;i<n;i++){
		for(int j=0;j<n;j++){
			if(i==j){
				sf[i][j]=0;
			}else{
				sf[i][j]=INF;
			}
		}
	}
	int a,b,c;
	for(int i=0;i<m;i++){
		scanf("%d %d %d",&a,&b,&c);
		sf[a][b]=c;
		sf[b][a]=c;
	}
	dijistra();
	printf("%d %d\n",cnt[d],max[d]);
	Print(d);
	return 0;
} 
void dijistra()
{
	mins[s]=0;
	max[s]=num[s];
	cnt[s]=1;
	way[s]=s;
	for(int i=0;i<n;i++){
		mins[i]=sf[s][i];
	}
	while(1){
		int min_dist=INF;
		int mid=-1;
		for(int i=0;i<n;i++){
			if(flag[i]==0&&min_dist>mins[i]){
				min_dist=mins[i];
				mid=i;
			}
		}
		if(mid==-1){
			break;
		};
		flag[mid]=1;
		for(int i=0;i<n;i++){
			if(flag[i]==0){	
				if(mins[i]>mins[mid]+sf[mid][i]){
					mins[i]=mins[mid]+sf[mid][i];
					cnt[i]=cnt[mid];
					max[i]=max[mid]+num[i];
					way[i]=mid;
				}else{
					if(mins[i]==mins[mid]+sf[mid][i]){
						cnt[i]+=cnt[mid];
						if(max[i]<max[mid]+num[i]){
							max[i]=max[mid]+num[i];
							way[i]=mid;
						}
					}
				}
				
			}
			
		}
	}
}
void Print(int t)
{
	if(t==s){
		printf("%d",t);
		return;
	}
	Print(way[t]);
	printf(" %d",t);
}